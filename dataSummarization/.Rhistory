foo <- list(project1:'syn12323213',project2:'syn12321312')
foo <- list(project1='syn12323213',project2='syn12321312')
names(foo)
projectList <- list('Drug Screening of pNF Cell Lines' = 'syn7506024',
'pNF Cell Line Characterization Studies' = 'syn7805075')
names(projectList)
source('getData.R')
rm(projectList)
source('getData.R')
View(projectDf)
source('getData.R')
rm(foo)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# global.R
options(stringsAsFactors = FALSE)
library(shiny)
library(shinydashboard)
library(synapseClient)
synapseLogin()
source('dataSummarizationModule.R')
source('getData.R')
selected_projects <- projectDf$projectName
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
annotationTbls
combinedTableList <- lapply(annotationTbls, function(x){
tbl <- synTableQuery(paste("SELECT * FROM",x))
})
combinedTable <- do.call("rbind",combinedTableList)
combinedTable <- rbind.fill(combinedTableList)
type(combinedTableList[[1]])
class(combinedTableList[[1]])
combinedTableList <- lapply(annotationTbls, function(x){
tbl <- synTableQuery(paste("SELECT * FROM",x))
tbl@values
})
combinedTable <- rbind.fill(combinedTableList)
require(plyr)
combinedTable <- rbind.fill(combinedTableList)
View(combinedTable)
colnames(combinedTableList[[1]])
colnames(combinedTableList[[2]])
foo <- colnames(combinedTableList[[1]])
bar <- colnames(combinedTableList[[2]])
length(fo)
length(foo)
length(bar)
identical(foo, bar)
identical(sort(foo), sort(bar))
foo
foo[~c('synapseId')]
print(foo)
shiny::runApp()
desKeys <- c("assay","species")
sumKeys <- c("syanpseId","sampleIdentifier")
?ddply
?length2
?length
test <- ddply(combinedTable,desKeys,function(x) c(synapseId_counts = length(unique(x$synapseId))))
View(test)
test <- ddply(combinedTable,desKeys,function(x) c(synapseId_counts = length(unique(x$synapseId)),
sample_counts = length(unique(x$sampleIdentifier))))
test <- ddply(combinedTable,desKeys,function(x){
c(synapseId_counts = length(unique(x$synapseId)),
sample_counts = length(unique(x$sampleIdentifier)))
})
?vapply
key <- "assay"
foo <- combinedTable[,key]
res <- sapply(sumKeys, function(key){
do.call("<-",list(paste("n",key,sep="_"), length(unique(combinedTable[,key]))))
})
sumKeys <- c("synapseId","sampleIdentifier")
res <- sapply(sumKeys, function(key){
do.call("<-",list(paste("n",key,sep="_"), length(unique(combinedTable[,key]))))
})
res
test <- ddply(combinedTable,desKeys,function(x){
res <- sapply(sumKeys, function(key){
do.call("<-",list(paste("n",key,sep="_"), length(unique(x[,key]))))
})
res
})
View(test)
shiny::runApp()
res
sapply(sumKeys, function(key){
print(paste("n",key,sep="_"))
#do.call("<-",list(paste("n",key,sep="_"), length(unique(combinedTable[,key]))))
})
sapply(sumKeys, function(key){
print(paste("n",key,sep="_"))
#do.call("<-",list(paste("n",key,sep="_"), length(unique(combinedTable[,key]))))
},USE.NAMES = FALSE)
sapply(sumKeys, function(key){
#print(paste("n",key,sep="_"))
do.call("<-",list(paste("n",key,sep="_"), length(unique(combinedTable[,key]))))
},USE.NAMES = FALSE)
sapply(sumKeys, function(key){
#print(paste("n",key,sep="_"))
assign(paste("n",key,sep="_"), length(unique(combinedTable[,key])))
},USE.NAMES = FALSE)
res <- sapply(sumKeys, function(key){
#print(paste("n",key,sep="_"))
assign(paste("n",key,sep="_"), length(unique(combinedTable[,key])))
},USE.NAMES = FALSE)
res
res <- sapply(sumKeys, function(key){
length(unique(combinedTable[,key]))
})
res
shiny::runApp()
date()
format(date(),"%Y-%M-%D")
as.Date(date(),"%Y-%M-%D")
as.Date(date(),"%Y-%m-%d")
currentDate <- Sys.Date()
Sys.Date()
paste(Sys.Date(),'summarizedTable.csv',sep="_")
shiny::runApp()
shiny::runApp()
shiny::runApp()
selected_projects <- 'Drug Screening of pNF Cell Lines'
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
View(projectDf)
selected_projects <- projectDf$projectName[1]
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects <- c(projectDf$projectName[1])
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects <- projectDf$projectName
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
projectDf$projectName %in% selected_projects[1]
selected_projects <- projectDf$projectName[1]
selected_projects <- projectDf$projectName
selected_projects <- projectDf$projectName[1]
projectDf$projectName %in% selected_projects[1]
projectDf$projectName %in% selected_projects
projectDf[projectDf$projectName %in% selected_projects]
projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects <- projectDf$projectName
projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects <- projectDf$projectName[2]
projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects
projectDf[projectDf$projectName %in% selected_projects]$annotationTable
?filter
selected_projects <- projectDf$projectName[1]
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects]$annotationTable
selected_projects
projectDf$projectName %in% selected_projects
projectDf[projectDf$projectName %in% selected_projects]
temp <- projectDf[projectDf$projectName %in% selected_projects]
View(temp)
annotationTbls <- projectDf[projectDf$projectName %in% selected_projects,]$annotationTable
shiny::runApp()
